datasource db {
    url      = env("DATABASE_URL")
    provider = "postgresql"
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id         BigInt @id @default(autoincrement())
    externalId String @db.Uuid @unique
    username   String @db.VarChar(32) @unique
    email      String @unique
    firstName  String @db.VarChar(32)
    lastName   String
    decks      Deck[]
    cards      Card[]
    answers    Answer[]
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Deck {
    id          BigInt   @id @default(autoincrement())
    externalId  String   @db.Uuid @unique
    owner       User     @relation(fields: [ownerId], references: [id])
    ownerId     BigInt
    title       String
    cards       CardsOnDecks[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Card {
    id              BigInt    @id @default(autoincrement())
    externalId      String    @db.Uuid @unique
    owner           User      @relation(fields: [ownerId], references: [id])
    ownerId         BigInt
    contentFront    String
    contentBack     String
    decks           CardsOnDecks[]
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}

model CardsOnDecks {
    id            BigInt   @id @default(autoincrement())
    deck          Deck     @relation(fields: [deckId], references: [id])
    deckId        BigInt
    card          Card     @relation(fields: [cardId], references: [id])
    cardId        BigInt
    answers       Answer[]
    assignedAt    DateTime @default(now())
}

model Answer {
    id            BigInt       @id @default(autoincrement())
    cardOnDeck    CardsOnDecks @relation(fields: [cardOnDeckId], references: [id])
    cardOnDeckId  BigInt
    answeredBy    User         @relation(fields: [answeredById], references: [id])
    answeredById  BigInt
    difficulty    String
    answeredAt    DateTime     @default(now())
    answerAgainAt DateTime
}
