datasource db {
    url      = env("DATABASE_URL")
    provider = "postgresql"
}

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

model User {
    id         BigInt @id @default(autoincrement())
    externalId String @db.Uuid @unique
    username   String @db.VarChar(32) @unique
    email      String @unique
    firstName  String @db.VarChar(32)
    lastName   String
    decks      Deck[]
    answers    Answer[]
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Deck {
    id          BigInt   @id @default(autoincrement())
    externalId  String   @db.Uuid @unique
    owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId     BigInt
    title       String
    cards       Card[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Card {
    id              BigInt    @id @default(autoincrement())
    externalId      String    @db.Uuid @unique
    deck            Deck      @relation(fields: [deckId], references: [id], onDelete: Cascade)
    deckId          BigInt
    answers         Answer[]
    contentFront    String
    contentBack     String
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    // @@index([externalId], type: BTree)
    // @@index([contentFront(ops: raw("gin_trgm_ops")), contentBack(ops: raw("gin_trgm_ops"))], type: Gin)
}

enum DifficultyLevel {
    Retry
    Hard
    Good
    Easy
}

model Answer {
    id            BigInt       @id @default(autoincrement())
    externalId    String       @db.Uuid @unique
    card          Card         @relation(fields: [cardId], references: [id], onDelete: Cascade)
    cardId        BigInt
    answeredBy    User         @relation(fields: [answeredById], references: [id], onDelete: Cascade)
    answeredById  BigInt
    difficulty    DifficultyLevel
    answeredAt    DateTime
    answerAgainAt DateTime
}
